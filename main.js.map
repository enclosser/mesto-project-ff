{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project/./src/components/api.js","webpack://mesto-project/./src/components/card.js","webpack://mesto-project/./src/components/modal.js","webpack://mesto-project/./src/components/validation.js","webpack://mesto-project/./src/index.js"],"sourcesContent":["const config = {\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-21\",\n  headers: {\n    authorization: \"ba726ca4-babe-4c60-b803-4ec06cee7921\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nfunction checkResponse(res) {\n  return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n}\n\nfunction request(endpoint, options) {\n  return fetch(`${config.baseUrl}${endpoint}`, {\n    headers: config.headers,\n    ...options,\n  }).then(checkResponse);\n}\n\n// Функции для выполнения запросов к API\n\nexport const getUserInfo = () => \n  request(\"/users/me\", { method: \"GET\" });\n\nexport const getCards = () => \n  request(\"/cards\", { method: \"GET\" });\n\nexport const updateUserServerInfo = (data) =>\n  request(\"/users/me\", {\n    method: \"PATCH\",\n    body: JSON.stringify({\n      name: data.name,\n      about: data.job,\n    }),\n  });\n\nexport const createNewPost = (data) =>\n  request(\"/cards\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      link: data.dataCard.link,\n      name: data.dataCard.name,\n    }),\n  });\n\nexport const deleteCard = (cardId) =>\n  request(`/cards/${cardId}`, { method: \"DELETE\" });\n\nexport const addLike = (cardId) =>\n  request(`/cards/likes/${cardId}`, { method: \"PUT\" });\n\nexport const removeLike = (cardId) =>\n  request(`/cards/likes/${cardId}`, { method: \"DELETE\" });\n\nexport const changeAvatar = (linkImg) =>\n  request(\"/users/me/avatar\", {\n    method: \"PATCH\",\n    body: JSON.stringify({ avatar: linkImg }),\n  });\n","import { addLike, removeLike } from \"./api.js\";\n\nexport const cardTemplate = document.querySelector(\"#card-template\").content;\n\nfunction updateButtonState(button, text) {\n  button.textContent = text;\n}\n\nexport function likeCard(event, data, likeCounter) {\n  const isLiked = event.target.classList.contains(\"card__like-button_is-active\");\n  const action = isLiked ? removeLike : addLike;\n  const cardId = data.informationCard._id;\n\n  action(cardId)\n    .then(res => {\n      likeCounter.textContent = String(res.likes.length);\n      event.target.classList.toggle(\"card__like-button_is-active\");\n    })\n    .catch(err => console.log(err));\n}\n\nexport function makeCard(data, launchDeleteCard, likeCard, handlerOpenPopupImage) {\n  const { informationCard: cardData, informationMe } = data;\n  const cardElement = cardTemplate.querySelector(\".card\").cloneNode(true);\n  const buttonLike = cardElement.querySelector(\".card__like-button\");\n  const cardImage = cardElement.querySelector(\".card__image\");\n  const likeCounter = cardElement.querySelector(\".like__counter\");\n  const buttonRemove = cardElement.querySelector(\".card__delete-button\");\n\n  likeCounter.textContent = String(cardData.likes.length);\n  cardImage.src = cardData.link;\n  cardImage.alt = cardData.name;\n  cardElement.querySelector(\".card__title\").textContent = cardData.name;\n\n  if (cardData.owner._id === informationMe._id) {\n    buttonRemove.addEventListener(\"click\", (evt) => launchDeleteCard(evt, cardData));\n  } else {\n    buttonRemove.remove();\n  }\n\n  if (cardData.likes.some(like => like._id === informationMe._id)) {\n    buttonLike.classList.add(\"card__like-button_is-active\");\n  }\n\n  buttonLike.addEventListener(\"click\", (evt) => likeCard(evt, data, likeCounter));\n  cardImage.addEventListener(\"click\", handlerOpenPopupImage);\n\n  return cardElement;\n}\n","export function openModal(popup) {\n  popup.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", pressEscapeClose);\n  popup.addEventListener(\"mousedown\", clickOutsideClose);\n}\n\nexport function closeModal(popup) {\n  popup.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", pressEscapeClose);\n  popup.removeEventListener(\"mousedown\", clickOutsideClose);\n}\n\nfunction clickOutsideClose(evt) {\n  if (evt.target === evt.currentTarget || !evt.target.closest(\".popup__content\")) {\n    closeModal(evt.currentTarget);\n  }\n}\n\nfunction pressEscapeClose(evt) {\n  if (evt.key === \"Escape\") {\n    const selectedPopup = document.querySelector(\".popup_is-opened\");\n    if (selectedPopup) {\n      closeModal(selectedPopup);\n    }\n  }\n}\n\n","const showInputError = (formElement, inputElement, errorMessage, inputErrorClass) => {\n  const errorElement = formElement.querySelector(`.input_${inputElement.name}-error`);\n  inputElement.classList.add(inputErrorClass);\n  errorElement.textContent = errorMessage;\n};\n\nconst hideInputError = (formElement, inputElement, inputErrorClass) => {\n  const errorElement = formElement.querySelector(`.input_${inputElement.name}-error`);\n  \n  // Очищаем кастомное сообщение об ошибке\n  inputElement.setCustomValidity(\"\");\n\n  inputElement.classList.remove(inputErrorClass);\n  errorElement.textContent = \"\";\n};\n\nexport function checkInputValidity(formElement, inputElement, inputErrorClass) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage || \"\");\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n\n  if (inputElement.validity.valid) {\n    hideInputError(formElement, inputElement, inputErrorClass);\n  } else {\n    showInputError(formElement, inputElement, inputElement.validationMessage, inputErrorClass);\n  }\n}\n\nconst hasInvalidInput = (inputList) => inputList.some(input => !input.validity.valid);\n\nexport function enableValidation({ inputListFormProfile, buttonSubmit, formSelector, inputErrorClass, inactiveButtonClass }) {\n  // Добавляем обработчики на каждое поле ввода\n  inputListFormProfile.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", () => {\n      checkInputValidity(formSelector, inputElement, inputErrorClass);\n      // Обновляем состояние кнопки после проверки валидности каждого поля ввода\n      toggleButtonState(inputListFormProfile, buttonSubmit, inactiveButtonClass);\n    });\n  });\n\n  // Проверяем состояние кнопки только после добавления всех обработчиков\n  toggleButtonState(inputListFormProfile, buttonSubmit, inactiveButtonClass);\n}\n\nexport function clearValidation(formElement, inputListFormProfile, buttonSubmit) {\n  inputListFormProfile.forEach((inputElement) => {\n    hideInputError(formElement, inputElement);\n    inputElement.removeEventListener(\"input\", () => {\n      checkInputValidity(formElement, inputElement);\n      toggleButtonState(inputListFormProfile, buttonSubmit);\n    });\n  });\n\n  // Обновляем состояние кнопки после очистки всех полей и удаления обработчиков\n  toggleButtonState(inputListFormProfile, buttonSubmit);\n}\n\n\nexport const toggleButtonState = (inputList, buttonSubmit, inactiveButtonClass = \"popup__button_disabled\") => {\n  if (hasInvalidInput(inputList)) {\n    buttonSubmit.classList.add(inactiveButtonClass);\n    buttonSubmit.disabled = true;\n  } else {\n    buttonSubmit.classList.remove(inactiveButtonClass);\n    buttonSubmit.disabled = false;\n  }\n};\n\n","import \"./pages/index.css\";\nimport { makeCard, likeCard } from \"./components/card.js\";\nimport { openModal, closeModal } from \"./components/modal.js\";\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\nimport {\n  getUserInfo,\n  getCards,\n  updateUserServerInfo,\n  createNewPost,\n  changeAvatar,\n  deleteCard,\n} from \"./components/api.js\";\n\n// Объявление переменных:\nconst validationLink = /http.*(jpeg|jpg|gif|png)/gi;\n\nconst placesList = document.querySelector(\".places__list\");\nconst profileTitle = document.querySelector(\".profile__title\");\nconst profileDescription = document.querySelector(\".profile__description\");\nconst buttonEdit = document.querySelector(\".profile__edit-button\");\nconst buttonAdd = document.querySelector(\".profile__add-button\");\nconst profileImage = document.querySelector(\".profile__image\");\n\nconst popupEdit = document.querySelector(\".popup_type_edit\");\nconst popupNewCard = document.querySelector(\".popup_type_new-card\");\nconst popupImage = document.querySelector(\".popup_type_image\");\nconst popupNewAvatar = document.querySelector(\".popup_type_edit_avatar\");\nconst popupDelete = document.querySelector(\".delete__popup\"); // Добавлено\nconst buttonPopupDelete = popupDelete.querySelector(\".popup__button\"); // Добавлено\nconst selectedPopupImage = popupImage.querySelector(\".popup__image\");\nconst popupCaption = popupImage.querySelector(\".popup__caption\");\n\nconst formElementEditProfile = popupEdit.querySelector(\".popup__form[name='edit-profile']\");\nconst formElementNewPlace = popupNewCard.querySelector(\".popup__form[name='new-place']\");\nconst formElementEditAvatar = popupNewAvatar.querySelector(\".popup__form[name='edit-avatar']\");\n\nconst inputListFormProfile = Array.from(formElementEditProfile.querySelectorAll(\".popup__input\"));\nconst inputListFormAddCard = Array.from(formElementNewPlace.querySelectorAll(\".popup__input\"));\nconst inputListFormEditAvatar = Array.from(formElementEditAvatar.querySelectorAll(\".popup__input\"));\n\nconst nameProfileInput = formElementEditProfile.querySelector(\".popup__input_type_name\");\nconst jobInput = formElementEditProfile.querySelector(\".popup__input_type_description\");\nconst nameNewCardInput = formElementNewPlace.querySelector(\".popup__input_type_card-name\");\nconst urlInput = formElementNewPlace.querySelector(\".popup__input_type_url\");\n\nconst buttonPopupEditProfileSubmit = formElementEditProfile.querySelector(\".popup__button\");\nconst buttonPopupAddCardSubmit = formElementNewPlace.querySelector(\".popup__button\");\nconst buttonPopupNewAvatarSubmit = formElementEditAvatar.querySelector(\".popup__button\");\n\n// Здесь добавлено определение formList\nconst formList = Array.from(document.querySelectorAll(\".popup__form\"));\n\n// Основные функции:\nfunction addCard(data) {\n  return makeCard(data, launchDeleteCard, likeCard, handlerOpenPopupImage);\n}\n\nfunction updateUserInfo(data) {\n  profileTitle.textContent = data.name;\n  profileDescription.textContent = data.about;\n  profileImage.style.backgroundImage = `url(${data.avatar})`;\n}\n\nfunction renderInitialCards(cards, userInfo) {\n  cards.forEach((card) => {\n    if (validationLink.test(card.link)) {\n      const readyCard = addCard({ informationCard: card, informationMe: userInfo });\n      placesList.append(readyCard);\n    }\n  });\n}\n\nfunction loadInitialInfo() {\n  Promise.all([getUserInfo(), getCards()])\n    .then(([userInfo, cards]) => {\n      window.dataUserInfo = userInfo;\n      updateUserInfo(userInfo);\n      renderInitialCards(cards, userInfo);\n    })\n    .catch(console.log);\n}\n\nfunction renderNewCard(cardData) {\n  const readyCard = addCard({ informationCard: cardData, informationMe: window.dataUserInfo });\n  placesList.prepend(readyCard);\n}\n\nfunction handlerOpenPopupImage(evt) {\n  selectedPopupImage.src = evt.target.src;\n  selectedPopupImage.alt = evt.target.alt;\n  popupCaption.textContent = evt.target.alt;\n  openModal(popupImage);\n}\n\nfunction handleFormSubmit(button, apiFunction, onSuccess, onError) {\n  return (evt) => {\n    evt.preventDefault();\n    button.textContent = \"Сохранение...\";\n    apiFunction()\n      .then(onSuccess)\n      .catch(onError)\n      .finally(() => {\n        button.textContent = \"Сохранить\";\n      });\n  };\n}\n\nfunction handleDelete(selectedCard, cardId) {\n  updateButtonState(buttonPopupDelete, \"Удаление...\");\n  deleteCard(cardId._id)\n    .then(() => {\n      selectedCard.remove();\n      closeModal(popupDelete);\n    })\n    .catch(console.log)\n    .finally(() => {\n      updateButtonState(buttonPopupDelete, \"Да\");\n    });\n}\n\nfunction launchDeleteCard(event, cardData) {\n  const selectedCard = event.target.closest(\".card\");\n  openModal(popupDelete);\n  buttonPopupDelete.onclick = () => handleDelete(selectedCard, cardData);\n}\n\nfunction updateButtonState(button, text) {\n  button.textContent = text;\n}\n\nbuttonEdit.addEventListener(\"click\", () => {\n  nameProfileInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n  openModal(popupEdit);\n  clearValidation(formElementEditProfile, inputListFormProfile, buttonPopupEditProfileSubmit);\n});\n\nbuttonAdd.addEventListener(\"click\", () => {\n  formElementNewPlace.reset();\n  clearValidation(formElementNewPlace, inputListFormAddCard, buttonPopupAddCardSubmit);\n  openModal(popupNewCard);\n});\n\nprofileImage.addEventListener(\"click\", () => {\n  clearValidation(formElementEditAvatar, inputListFormEditAvatar, buttonPopupNewAvatarSubmit);\n  openModal(popupNewAvatar);\n});\n\ndocument.querySelectorAll(\".popup__close\").forEach((closeButton) => {\n  closeButton.addEventListener(\"click\", (evt) => closeModal(evt.target.closest(\".popup\")));\n});\n\nformElementEditProfile.addEventListener(\"submit\", handleFormSubmit(\n  buttonPopupEditProfileSubmit,\n  () => updateUserServerInfo({ name: nameProfileInput.value, job: jobInput.value }),\n  (res) => {\n    profileTitle.textContent = res.name;\n    profileDescription.textContent = res.about;\n    closeModal(popupEdit);\n  },\n  console.log\n));\n\nformElementNewPlace.addEventListener(\"submit\", handleFormSubmit(\n  buttonPopupAddCardSubmit,\n  () => createNewPost({ dataCard: { name: nameNewCardInput.value, link: urlInput.value, likes: [] } }),\n  (res) => {\n    renderNewCard(res);\n    closeModal(popupNewCard);\n  },\n  console.log\n));\n\nformElementEditAvatar.addEventListener(\"submit\", handleFormSubmit(\n  buttonPopupNewAvatarSubmit,\n  () => changeAvatar(formElementEditAvatar.querySelector(\".popup__input_type_url\").value),\n  (link) => {\n    profileImage.style.backgroundImage = `url(${link.avatar})`;\n    closeModal(popupNewAvatar);\n  },\n  console.log\n));\n\nformList.forEach((formElement) => {\n  enableValidation({\n    formSelector: formElement,\n    inputListFormProfile: Array.from(formElement.querySelectorAll(\".popup__input\")),\n    buttonSubmit: formElement.querySelector(\".popup__button\"),\n    inactiveButtonClass: \"popup__button_disabled\",\n    inputErrorClass: \"popup__input_type_error\",\n    errorClass: \"popup__error_visible\",\n  });\n});\n\nloadInitialInfo();\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","request","endpoint","options","fetch","_objectSpread","then","deleteCard","cardId","method","addLike","removeLike","cardTemplate","document","querySelector","content","likeCard","event","data","likeCounter","target","classList","contains","informationCard","_id","textContent","String","likes","length","toggle","catch","err","console","log","openModal","popup","add","addEventListener","pressEscapeClose","clickOutsideClose","closeModal","remove","removeEventListener","evt","currentTarget","closest","key","selectedPopup","showInputError","formElement","inputElement","errorMessage","inputErrorClass","errorElement","name","hideInputError","setCustomValidity","checkInputValidity","validity","patternMismatch","dataset","valid","validationMessage","clearValidation","inputListFormProfile","buttonSubmit","forEach","toggleButtonState","inputList","inactiveButtonClass","arguments","undefined","some","input","hasInvalidInput","disabled","validationLink","placesList","profileTitle","profileDescription","buttonEdit","buttonAdd","profileImage","popupEdit","popupNewCard","popupImage","popupNewAvatar","popupDelete","buttonPopupDelete","selectedPopupImage","popupCaption","formElementEditProfile","formElementNewPlace","formElementEditAvatar","Array","from","querySelectorAll","inputListFormAddCard","inputListFormEditAvatar","nameProfileInput","jobInput","nameNewCardInput","urlInput","buttonPopupEditProfileSubmit","buttonPopupAddCardSubmit","buttonPopupNewAvatarSubmit","formList","addCard","launchDeleteCard","handlerOpenPopupImage","cardData","informationMe","cardElement","cloneNode","buttonLike","cardImage","buttonRemove","src","link","alt","owner","like","makeCard","handleFormSubmit","button","apiFunction","onSuccess","onError","preventDefault","finally","selectedCard","onclick","updateButtonState","handleDelete","text","value","reset","closeButton","job","body","JSON","stringify","about","dataCard","readyCard","window","dataUserInfo","prepend","linkImg","avatar","style","backgroundImage","_ref","formSelector","enableValidation","errorClass","all","_ref2","userInfo","cards","card","test","append","renderInitialCards"],"sourceRoot":""}